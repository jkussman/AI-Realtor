{"ast":null,"code":"var _jsxFileName = \"/Users/jackkussman/AI-Realtor/frontend/src/pages/SettingsPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Typography, TextField, Button, Grid, Alert, FormControlLabel, Switch, Card, CardContent, Snackbar } from '@mui/material';\nimport { Save as SaveIcon, TestTube as TestIcon, Refresh as RefreshIcon, Security as SecurityIcon } from '@mui/icons-material';\n\n// Import API functions\nimport { testConnection } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsPage = () => {\n  _s();\n  const [settings, setSettings] = useState({\n    openaiApiKey: '',\n    gmailClientId: '',\n    gmailClientSecret: '',\n    estatedApiKey: '',\n    reonmyApiKey: '',\n    serpApiKey: '',\n    fromEmail: '',\n    fromName: '',\n    enableNotifications: true,\n    autoApprove: false\n  });\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n  const [testingConnection, setTestingConnection] = useState(false);\n  const showNotification = (message, severity) => {\n    setNotification({\n      open: true,\n      message,\n      severity\n    });\n  };\n  const handleCloseNotification = () => {\n    setNotification(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n  const handleInputChange = field => event => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n  const handleSwitchChange = field => event => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: event.target.checked\n    }));\n  };\n  const handleSaveSettings = () => {\n    // In a real application, this would save to backend or local storage\n    localStorage.setItem('ai-realtor-settings', JSON.stringify(settings));\n    showNotification('Settings saved successfully!', 'success');\n  };\n  const handleTestConnection = async () => {\n    setTestingConnection(true);\n    try {\n      const response = await testConnection();\n      if (response.success) {\n        showNotification('API connection successful!', 'success');\n      } else {\n        showNotification(`Connection failed: ${response.error}`, 'error');\n      }\n    } catch (error) {\n      showNotification(`Connection test failed: ${error}`, 'error');\n    } finally {\n      setTestingConnection(false);\n    }\n  };\n  const handleLoadSettings = () => {\n    const savedSettings = localStorage.getItem('ai-realtor-settings');\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings);\n        setSettings(parsed);\n        showNotification('Settings loaded from saved data', 'info');\n      } catch (error) {\n        showNotification('Failed to load saved settings', 'error');\n      }\n    } else {\n      showNotification('No saved settings found', 'info');\n    }\n  };\n\n  // Load settings on component mount\n  React.useEffect(() => {\n    handleLoadSettings();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"Configure API keys and application settings for the AI Realtor system.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 8,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(SecurityIcon, {\n                sx: {\n                  mr: 1\n                },\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"API Configuration\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"OpenAI API Key\",\n                  type: \"password\",\n                  fullWidth: true,\n                  value: settings.openaiApiKey,\n                  onChange: handleInputChange('openaiApiKey'),\n                  helperText: \"Required for AI building analysis and contact generation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Gmail Client ID\",\n                  fullWidth: true,\n                  value: settings.gmailClientId,\n                  onChange: handleInputChange('gmailClientId'),\n                  helperText: \"OAuth2 client ID for Gmail API\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Gmail Client Secret\",\n                  type: \"password\",\n                  fullWidth: true,\n                  value: settings.gmailClientSecret,\n                  onChange: handleInputChange('gmailClientSecret'),\n                  helperText: \"OAuth2 client secret for Gmail API\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Estated API Key (Optional)\",\n                  type: \"password\",\n                  fullWidth: true,\n                  value: settings.estatedApiKey,\n                  onChange: handleInputChange('estatedApiKey'),\n                  helperText: \"For enhanced property data\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                sm: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Reonomy API Key (Optional)\",\n                  type: \"password\",\n                  fullWidth: true,\n                  value: settings.reonmyApiKey,\n                  onChange: handleInputChange('reonmyApiKey'),\n                  helperText: \"For commercial property data\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"SerpAPI Key (Optional)\",\n                  type: \"password\",\n                  fullWidth: true,\n                  value: settings.serpApiKey,\n                  onChange: handleInputChange('serpApiKey'),\n                  helperText: \"For enhanced web search capabilities\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 4,\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Email Configuration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"From Email\",\n                  type: \"email\",\n                  fullWidth: true,\n                  value: settings.fromEmail,\n                  onChange: handleInputChange('fromEmail'),\n                  helperText: \"Your Gmail address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"From Name\",\n                  fullWidth: true,\n                  value: settings.fromName,\n                  onChange: handleInputChange('fromName'),\n                  helperText: \"Name to appear in emails\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            mt: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Preferences\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: settings.enableNotifications,\n                onChange: handleSwitchChange('enableNotifications')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this),\n              label: \"Enable notifications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: settings.autoApprove,\n                onChange: handleSwitchChange('autoApprove')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this),\n              label: \"Auto-approve buildings (experimental)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 2,\n                flexWrap: 'wrap'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 30\n                }, this),\n                onClick: handleSaveSettings,\n                children: \"Save Settings\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(TestIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 30\n                }, this),\n                onClick: handleTestConnection,\n                disabled: testingConnection,\n                children: testingConnection ? 'Testing...' : 'Test API Connection'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 30\n                }, this),\n                onClick: handleLoadSettings,\n                children: \"Reload Settings\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            gutterBottom: true,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Setup Instructions:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            component: \"div\",\n            children: [\"1. Get an OpenAI API key from \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://platform.openai.com/api-keys\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"platform.openai.com\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), \"2. Set up Gmail API credentials in \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://console.cloud.google.com/\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"Google Cloud Console\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 50\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this), \"3. Optional: Get API keys for enhanced data sources (Estated, Reonomy, SerpAPI)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this), \"4. Save your settings and test the connection\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: notification.open,\n      autoHideDuration: 4000,\n      onClose: handleCloseNotification,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseNotification,\n        severity: notification.severity,\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(SettingsPage, \"YDG1zRrQL/pHDmIi6m/a+FRVZZs=\");\n_c = SettingsPage;\nexport default SettingsPage;\nvar _c;\n$RefreshReg$(_c, \"SettingsPage\");","map":{"version":3,"names":["React","useState","Box","Typography","TextField","Button","Grid","Alert","FormControlLabel","Switch","Card","CardContent","Snackbar","Save","SaveIcon","TestTube","TestIcon","Refresh","RefreshIcon","Security","SecurityIcon","testConnection","jsxDEV","_jsxDEV","SettingsPage","_s","settings","setSettings","openaiApiKey","gmailClientId","gmailClientSecret","estatedApiKey","reonmyApiKey","serpApiKey","fromEmail","fromName","enableNotifications","autoApprove","notification","setNotification","open","message","severity","testingConnection","setTestingConnection","showNotification","handleCloseNotification","prev","handleInputChange","field","event","target","value","handleSwitchChange","checked","handleSaveSettings","localStorage","setItem","JSON","stringify","handleTestConnection","response","success","error","handleLoadSettings","savedSettings","getItem","parsed","parse","useEffect","sx","p","children","mb","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","container","spacing","item","xs","lg","display","alignItems","mr","label","type","fullWidth","onChange","helperText","sm","mt","control","gap","flexWrap","startIcon","onClick","disabled","component","href","rel","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["/Users/jackkussman/AI-Realtor/frontend/src/pages/SettingsPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  Grid,\n  Alert,\n  Divider,\n  FormControlLabel,\n  Switch,\n  Card,\n  CardContent,\n  CardActions,\n  Snackbar\n} from '@mui/material';\nimport {\n  Save as SaveIcon,\n  TestTube as TestIcon,\n  Refresh as RefreshIcon,\n  Security as SecurityIcon\n} from '@mui/icons-material';\n\n// Import API functions\nimport { testConnection } from '../utils/api';\n\nconst SettingsPage: React.FC = () => {\n  const [settings, setSettings] = useState({\n    openaiApiKey: '',\n    gmailClientId: '',\n    gmailClientSecret: '',\n    estatedApiKey: '',\n    reonmyApiKey: '',\n    serpApiKey: '',\n    fromEmail: '',\n    fromName: '',\n    enableNotifications: true,\n    autoApprove: false\n  });\n\n  const [notification, setNotification] = useState<{\n    open: boolean;\n    message: string;\n    severity: 'success' | 'error' | 'info';\n  }>({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n\n  const [testingConnection, setTestingConnection] = useState(false);\n\n  const showNotification = (message: string, severity: 'success' | 'error' | 'info') => {\n    setNotification({\n      open: true,\n      message,\n      severity\n    });\n  };\n\n  const handleCloseNotification = () => {\n    setNotification(prev => ({ ...prev, open: false }));\n  };\n\n  const handleInputChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleSwitchChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: event.target.checked\n    }));\n  };\n\n  const handleSaveSettings = () => {\n    // In a real application, this would save to backend or local storage\n    localStorage.setItem('ai-realtor-settings', JSON.stringify(settings));\n    showNotification('Settings saved successfully!', 'success');\n  };\n\n  const handleTestConnection = async () => {\n    setTestingConnection(true);\n    try {\n      const response = await testConnection();\n      if (response.success) {\n        showNotification('API connection successful!', 'success');\n      } else {\n        showNotification(`Connection failed: ${response.error}`, 'error');\n      }\n    } catch (error) {\n      showNotification(`Connection test failed: ${error}`, 'error');\n    } finally {\n      setTestingConnection(false);\n    }\n  };\n\n  const handleLoadSettings = () => {\n    const savedSettings = localStorage.getItem('ai-realtor-settings');\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings);\n        setSettings(parsed);\n        showNotification('Settings loaded from saved data', 'info');\n      } catch (error) {\n        showNotification('Failed to load saved settings', 'error');\n      }\n    } else {\n      showNotification('No saved settings found', 'info');\n    }\n  };\n\n  // Load settings on component mount\n  React.useEffect(() => {\n    handleLoadSettings();\n  }, []);\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Settings\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Configure API keys and application settings for the AI Realtor system.\n        </Typography>\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* API Configuration */}\n        <Grid item xs={12} lg={8}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <SecurityIcon sx={{ mr: 1 }} color=\"primary\" />\n                <Typography variant=\"h6\">\n                  API Configuration\n                </Typography>\n              </Box>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    label=\"OpenAI API Key\"\n                    type=\"password\"\n                    fullWidth\n                    value={settings.openaiApiKey}\n                    onChange={handleInputChange('openaiApiKey')}\n                    helperText=\"Required for AI building analysis and contact generation\"\n                  />\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    label=\"Gmail Client ID\"\n                    fullWidth\n                    value={settings.gmailClientId}\n                    onChange={handleInputChange('gmailClientId')}\n                    helperText=\"OAuth2 client ID for Gmail API\"\n                  />\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    label=\"Gmail Client Secret\"\n                    type=\"password\"\n                    fullWidth\n                    value={settings.gmailClientSecret}\n                    onChange={handleInputChange('gmailClientSecret')}\n                    helperText=\"OAuth2 client secret for Gmail API\"\n                  />\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    label=\"Estated API Key (Optional)\"\n                    type=\"password\"\n                    fullWidth\n                    value={settings.estatedApiKey}\n                    onChange={handleInputChange('estatedApiKey')}\n                    helperText=\"For enhanced property data\"\n                  />\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    label=\"Reonomy API Key (Optional)\"\n                    type=\"password\"\n                    fullWidth\n                    value={settings.reonmyApiKey}\n                    onChange={handleInputChange('reonmyApiKey')}\n                    helperText=\"For commercial property data\"\n                  />\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <TextField\n                    label=\"SerpAPI Key (Optional)\"\n                    type=\"password\"\n                    fullWidth\n                    value={settings.serpApiKey}\n                    onChange={handleInputChange('serpApiKey')}\n                    helperText=\"For enhanced web search capabilities\"\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Email Configuration */}\n        <Grid item xs={12} lg={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Email Configuration\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    label=\"From Email\"\n                    type=\"email\"\n                    fullWidth\n                    value={settings.fromEmail}\n                    onChange={handleInputChange('fromEmail')}\n                    helperText=\"Your Gmail address\"\n                  />\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <TextField\n                    label=\"From Name\"\n                    fullWidth\n                    value={settings.fromName}\n                    onChange={handleInputChange('fromName')}\n                    helperText=\"Name to appear in emails\"\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          {/* Application Preferences */}\n          <Card sx={{ mt: 2 }}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Preferences\n              </Typography>\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={settings.enableNotifications}\n                    onChange={handleSwitchChange('enableNotifications')}\n                  />\n                }\n                label=\"Enable notifications\"\n              />\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={settings.autoApprove}\n                    onChange={handleSwitchChange('autoApprove')}\n                  />\n                }\n                label=\"Auto-approve buildings (experimental)\"\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Actions */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Actions\n              </Typography>\n              \n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<SaveIcon />}\n                  onClick={handleSaveSettings}\n                >\n                  Save Settings\n                </Button>\n                \n                <Button\n                  variant=\"outlined\"\n                  startIcon={<TestIcon />}\n                  onClick={handleTestConnection}\n                  disabled={testingConnection}\n                >\n                  {testingConnection ? 'Testing...' : 'Test API Connection'}\n                </Button>\n                \n                <Button\n                  variant=\"outlined\"\n                  startIcon={<RefreshIcon />}\n                  onClick={handleLoadSettings}\n                >\n                  Reload Settings\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Help Section */}\n        <Grid item xs={12}>\n          <Alert severity=\"info\">\n            <Typography variant=\"body2\" gutterBottom>\n              <strong>Setup Instructions:</strong>\n            </Typography>\n            <Typography variant=\"body2\" component=\"div\">\n              1. Get an OpenAI API key from <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noopener noreferrer\">platform.openai.com</a>\n              <br />\n              2. Set up Gmail API credentials in <a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Google Cloud Console</a>\n              <br />\n              3. Optional: Get API keys for enhanced data sources (Estated, Reonomy, SerpAPI)\n              <br />\n              4. Save your settings and test the connection\n            </Typography>\n          </Alert>\n        </Grid>\n      </Grid>\n\n      {/* Notification Snackbar */}\n      <Snackbar\n        open={notification.open}\n        autoHideDuration={4000}\n        onClose={handleCloseNotification}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n      >\n        <Alert onClose={handleCloseNotification} severity={notification.severity}>\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default SettingsPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
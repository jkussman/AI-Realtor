{"ast":null,"code":"import axios from 'axios';\n\n// API base URL - this will use the proxy in package.json for local development\nconst API_BASE_URL = '/api';\n\n// Types\n\n// Configure axios defaults\naxios.defaults.timeout = 30000; // 30 seconds\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// Request interceptor for logging\naxios.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Response Error:', error);\n  if (error.response) {\n    // Server responded with error status\n    console.error('Error Status:', error.response.status);\n    console.error('Error Data:', error.response.data);\n  } else if (error.request) {\n    // Request made but no response\n    console.error('No response received:', error.request);\n  } else {\n    // Something else happened\n    console.error('Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n/**\n * Process bounding boxes to find buildings\n */\nexport const processBoundingBoxes = async boundingBoxes => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/process-bbox`, {\n      bounding_boxes: boundingBoxes\n    });\n    return {\n      success: true,\n      data: response.data,\n      message: response.data.message\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return {\n      success: false,\n      error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Failed to process bounding boxes'\n    };\n  }\n};\n\n/**\n * Get all buildings\n */\nexport const getBuildings = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/buildings`);\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return {\n      success: false,\n      error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || error.message || 'Failed to fetch buildings'\n    };\n  }\n};\n\n/**\n * Get a specific building by ID\n */\nexport const getBuilding = async buildingId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/buildings/${buildingId}`);\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return {\n      success: false,\n      error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || error.message || 'Failed to fetch building'\n    };\n  }\n};\n\n/**\n * Approve a building and trigger outreach\n */\nexport const approveBuilding = async buildingId => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/approve-building`, {\n      building_id: buildingId\n    });\n    return {\n      success: true,\n      data: response.data,\n      message: response.data.message\n    };\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return {\n      success: false,\n      error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || error.message || 'Failed to approve building'\n    };\n  }\n};\n\n/**\n * Check email status\n */\nexport const checkEmailStatus = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/email-status`);\n    return {\n      success: true,\n      data: response.data,\n      message: response.data.message\n    };\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return {\n      success: false,\n      error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || error.message || 'Failed to check email status'\n    };\n  }\n};\n\n/**\n * Test API connection\n */\nexport const testConnection = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/`);\n    return {\n      success: true,\n      data: response.data,\n      message: 'API connection successful'\n    };\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return {\n      success: false,\n      error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.detail) || error.message || 'Failed to connect to API'\n    };\n  }\n};\n\n/**\n * Utility function to handle API errors consistently\n */\nexport const handleApiError = error => {\n  if (error.response) {\n    var _error$response$data2, _error$response$data3;\n    // Server responded with error status\n    return ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail) || ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || `Error ${error.response.status}`;\n  } else if (error.request) {\n    // Request made but no response\n    return 'No response from server. Please check your connection.';\n  } else {\n    // Something else happened\n    return error.message || 'An unexpected error occurred';\n  }\n};\n\n/**\n * Format date strings from API responses\n */\nexport const formatDate = dateString => {\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  } catch {\n    return dateString;\n  }\n};\nexport default {\n  processBoundingBoxes,\n  getBuildings,\n  getBuilding,\n  approveBuilding,\n  checkEmailStatus,\n  testConnection,\n  handleApiError,\n  formatDate\n};","map":{"version":3,"names":["axios","API_BASE_URL","defaults","timeout","headers","common","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","message","processBoundingBoxes","boundingBoxes","post","bounding_boxes","success","_error$response","_error$response$data","detail","getBuildings","get","_error$response2","_error$response2$data","getBuilding","buildingId","_error$response3","_error$response3$data","approveBuilding","building_id","_error$response4","_error$response4$data","checkEmailStatus","_error$response5","_error$response5$data","testConnection","_error$response6","_error$response6$data","handleApiError","_error$response$data2","_error$response$data3","formatDate","dateString","date","Date","toLocaleDateString","toLocaleTimeString"],"sources":["/Users/jackkussman/AI-Realtor/frontend/src/utils/api.ts"],"sourcesContent":["import axios from 'axios';\n\n// API base URL - this will use the proxy in package.json for local development\nconst API_BASE_URL = '/api';\n\n// Types\nexport interface BoundingBox {\n  north: number;\n  south: number;\n  east: number;\n  west: number;\n}\n\nexport interface Building {\n  id: number;\n  name?: string;\n  address: string;\n  building_type: string;\n  approved: boolean;\n  contact_email?: string;\n  contact_name?: string;\n  email_sent: boolean;\n  reply_received: boolean;\n  created_at: string;\n}\n\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\n// Configure axios defaults\naxios.defaults.timeout = 30000; // 30 seconds\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// Request interceptor for logging\naxios.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error);\n    if (error.response) {\n      // Server responded with error status\n      console.error('Error Status:', error.response.status);\n      console.error('Error Data:', error.response.data);\n    } else if (error.request) {\n      // Request made but no response\n      console.error('No response received:', error.request);\n    } else {\n      // Something else happened\n      console.error('Error:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Process bounding boxes to find buildings\n */\nexport const processBoundingBoxes = async (boundingBoxes: BoundingBox[]): Promise<ApiResponse> => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/process-bbox`, {\n      bounding_boxes: boundingBoxes\n    });\n    \n    return {\n      success: true,\n      data: response.data,\n      message: response.data.message\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: error.response?.data?.detail || error.message || 'Failed to process bounding boxes'\n    };\n  }\n};\n\n/**\n * Get all buildings\n */\nexport const getBuildings = async (): Promise<ApiResponse<Building[]>> => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/buildings`);\n    \n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: error.response?.data?.detail || error.message || 'Failed to fetch buildings'\n    };\n  }\n};\n\n/**\n * Get a specific building by ID\n */\nexport const getBuilding = async (buildingId: number): Promise<ApiResponse> => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/buildings/${buildingId}`);\n    \n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: error.response?.data?.detail || error.message || 'Failed to fetch building'\n    };\n  }\n};\n\n/**\n * Approve a building and trigger outreach\n */\nexport const approveBuilding = async (buildingId: number): Promise<ApiResponse> => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/approve-building`, {\n      building_id: buildingId\n    });\n    \n    return {\n      success: true,\n      data: response.data,\n      message: response.data.message\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: error.response?.data?.detail || error.message || 'Failed to approve building'\n    };\n  }\n};\n\n/**\n * Check email status\n */\nexport const checkEmailStatus = async (): Promise<ApiResponse> => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/email-status`);\n    \n    return {\n      success: true,\n      data: response.data,\n      message: response.data.message\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: error.response?.data?.detail || error.message || 'Failed to check email status'\n    };\n  }\n};\n\n/**\n * Test API connection\n */\nexport const testConnection = async (): Promise<ApiResponse> => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/`);\n    \n    return {\n      success: true,\n      data: response.data,\n      message: 'API connection successful'\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: error.response?.data?.detail || error.message || 'Failed to connect to API'\n    };\n  }\n};\n\n/**\n * Utility function to handle API errors consistently\n */\nexport const handleApiError = (error: any): string => {\n  if (error.response) {\n    // Server responded with error status\n    return error.response.data?.detail || error.response.data?.message || `Error ${error.response.status}`;\n  } else if (error.request) {\n    // Request made but no response\n    return 'No response from server. Please check your connection.';\n  } else {\n    // Something else happened\n    return error.message || 'An unexpected error occurred';\n  }\n};\n\n/**\n * Format date strings from API responses\n */\nexport const formatDate = (dateString: string): string => {\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  } catch {\n    return dateString;\n  }\n};\n\nexport default {\n  processBoundingBoxes,\n  getBuildings,\n  getBuilding,\n  approveBuilding,\n  checkEmailStatus,\n  testConnection,\n  handleApiError,\n  formatDate\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}